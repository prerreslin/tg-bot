import re
from aiogram import Router
from state.register import RegisterState
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    ReactionTypeEmoji
)
from aiogram.fsm.context import FSMContext
from state.register import RegisterState
from data.database import Database

from keyboards.user_choice import user_choice


db = Database("database.sql")

db.create_table("users", {
    "id": "INTEGER PRIMARY KEY",
    "telegram_id": "INTEGER",
    "username": "TEXT",
    "phone_number": "TEXT"
})


router = Router(name=__name__)

@router.message(CommandStart())
async def start_register(message: Message):
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤–∏–±–µ—Ä—ñ—Ç—å —è–∫ –≤–∏ —Ö–æ—á–∏—Ç–µ –∑–∞–π—Ç–∏?", reply_markup=user_choice)
    
    # if message.answer == user_choice:
        
    #     @router.message(Command("register"))
    #     async def start_register(message: Message, state: FSMContext):
    #         registered_phones = db.select("users", "phone_number")
    #         if any(message.from_user.username == phone[0] for phone in registered_phones):
    #             await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
    #             await message.react([ReactionTypeEmoji(emoji="üëç")])
    #         else:
    #             await message.answer(f"–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
    #             await state.set_state(RegisterState.username)

    #     # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
    #     @router.message(RegisterState.username)
    #     async def register_name(message: Message, state: FSMContext):
    #         # –î–æ–¥–∞–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–¥–Ω—ñ—î—é –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    #         # keyboard = get_action_kb()
    #         # await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=keyboard)
    #         await message.answer(f"–î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX.")
    #         await state.update_data(username=message.text)
    #         await state.set_state(RegisterState.phone_number)

    #     # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    #     @router.message(RegisterState.phone_number)
    #     async def register_phone(message: Message, state: FSMContext):
    #         if re.match(r"^\+?380\d{9}$", message.text):
    #             await state.update_data(phone_number=message.text)
    #             reg_data = await state.get_data()
    #             reg_name = reg_data.get("username")
    #             reg_phone = reg_data.get("phone_number")
                
    #             # –û—Ç—Ä–∏–º–∞–π—Ç–µ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¢–µ–ª–µ–≥—Ä–∞–º—É
    #             telegram_id = message.from_user.id
                
    #             # –î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    #             msg = f"–Ü–º'—è: {reg_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {reg_phone}"
    #             await message.answer(msg)
                
    #             try:
    #                 db.insert("users", {"telegram_id": telegram_id, "username": reg_name, "phone_number": reg_phone})
    #             except Exception as e:
    #                 print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö: {e}")
    #             else:
    #                 print("–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.")
                
    #             await message.react([ReactionTypeEmoji(emoji="üëç")])
                
    #             await state.clear()
    #         else:
    #             await message.answer(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX.")
    # else:
    #     pass
        

